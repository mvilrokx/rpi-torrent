# Setup and Configure Deluge

# Depends on:
#   vars:
#       deluge_system_user
#       deluge_password
#       deluge_user_home_dir
#       yarss_egg
#       locations:
#         plugins
#         downloads
#         completed
#         backups
#         autoadd
#       mount_point
#       share_directory
#       enabled_plugins
#       regex_include
#       subscription_name
#       rssfeed
#         key
#         name
#         url
#         site

- name: Add 'deluge' user and group
  user:
    name: '{{ deluge_system_user }}'
    system: yes
    comment: 'Deluge Service'
    home: '{{ deluge_user_home_dir }}'
  become: yes

- name: Add 'pi' user to deluge group
  user:
    name: pi
    groups: '{{ deluge_system_user }}'
    append: yes
  become: yes

- name: Start Deluge daemon to create config files
  command: deluged
  become: yes
  become_user: '{{ deluge_system_user }}'

- name: Pausing for the daemon to create some files
  pause: seconds=5

- name: Allow remote access to deluge deamon
  command: deluge-console "config -s allow_remote True"
  become: yes
  become_user: '{{ deluge_system_user }}'

- name: Stop Deluge deamon.
  command: pkill deluged
  become: yes
  become_user: '{{ deluge_system_user }}'

- name: Config Deluge Login
  lineinfile:
    path: '{{ deluge_user_home_dir }}/.config/deluge/auth'
    insertafter: EOF
    # line: "{{ deluge_system_user | default('pi') }}:{{ deluge_password | default('raspberry') }}:10"
    line: pi:raspberry:10
    backup: yes
  become: yes
  become_user: '{{ deluge_system_user }}'

- name: Copy deluged service file
  template:
    src: templates/deluged.service.j2
    dest: /etc/systemd/system/deluged.service
    backup: yes
  become: yes

- name: Create deluged.service.d directory
  file: path=/etc/systemd/system/deluged.service.d state=directory # mode=0755
  become: yes

- name: Copy deluged user.conf file
  template:
    src: templates/user.conf.j2
    dest: /etc/systemd/system/deluged.service.d/user.conf
    backup: yes
  become: yes

- name: Start Deluge at boot time
  systemd:
    name: /etc/systemd/system/deluged.service
    enabled: yes
  become: yes

- name: Download YaRSS2 Plugin
  get_url:
    url: '{{ yarss_egg }}'
    dest: '{{ deluge_user_home_dir }}/{{ locations.plugins }}'
    validate_certs: no
    mode: 0755
    group: '{{ deluge_system_user }}'
    owner: '{{ deluge_system_user }}'
  become: yes
  become_user: '{{ deluge_system_user }}'

- name: Configure YaRSS2 Plugin
  template:
    src: templates/yarss2.j2
    dest: '{{ deluge_user_home_dir }}/.config/deluge/yarss2.conf'
    backup: yes
  become: yes
  become_user: '{{ deluge_system_user }}'

- name: Config Deluge
  lineinfile:
    path: '{{ deluge_user_home_dir }}/.config/deluge/core.conf'
    regexp: '{{ item.regexp }}'
    line: '{{ item.line }}'
    backup: yes
  become: yes
  become_user: '{{ deluge_system_user }}'
  with_items:
    - {
        regexp: '^  "move_completed_path":',
        line: '  "move_completed_path": "{{ mount_point }}/{{ share_directory }}/{{ locations.completed }}",',
      }
    - {
        regexp: '^  "download_location":',
        line: '  "download_location": "{{ mount_point }}/{{ share_directory }}/{{ locations.downloading }}",',
      }
    - {
        regexp: '^  "torrentfiles_location":',
        line: '  "torrentfiles_location": "{{ mount_point }}/{{ share_directory }}/{{ locations.backups }}",',
      }
    - {
        regexp: '^  "autoadd_location":',
        line: '  "autoadd_location": "{{ mount_point }}/{{ share_directory }}/{{ locations.autoadd }}",',
      }
    - {
        regexp: '^  "plugins_location":',
        line: '  "plugins_location": "{{ deluge_user_home_dir }}/{{ locations.plugins }}",',
      }
    - {
        regexp: '^  "enabled_plugins":',
        line: '  "enabled_plugins": ["{{ enabled_plugins }}"],',
      }
    - {
        regexp: '^  "copy_torrent_file":',
        line: '  "copy_torrent_file": true,',
      }
    - {
        regexp: '^  "del_copy_torrent_file":',
        line: '  "del_copy_torrent_file": true,',
      }
    - { regexp: '^  "move_completed":', line: '  "move_completed": true,' }
    - { regexp: '^  "autoadd_enable":', line: '  "autoadd_enable": true,' }
